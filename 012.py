"""
Project Euler Problem 12
========================

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7^th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 =
28. The first ten terms would be:

                 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five
divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""
import math


def findFactors(number):
    factors = []

    while (number % 2 == 0):
        factors.append(2)
        number = number/2

    i = 3
    max_factor = math.sqrt(number)
    while (i <= max_factor):
        while (number % i == 0):
            factors.append(int(i))
            number = number/i
            max_factor = math.sqrt(number)
        i = i + 2

    if (number > 1):
        factors.append(int(number))

    return factors

def calculate_num_divisors(number):
	list_num = []
	list_factors = findFactors(number)
	num_divisors = 1
	for i in list_factors:
		if i not in list_num:
			list_num.append(i)
	for i in list_num:
		num_divisors = num_divisors * (1 + list_factors.count(i))
	return num_divisors

def solve():
	number_divisors = 0
	number = 0
	i = 1
	while(number_divisors <= 500):
		number += i
		number_divisors = calculate_num_divisors(number)
		i += 1
	return number


if __name__ == "__main__":
	print(solve())